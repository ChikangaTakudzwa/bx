apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
  - name: output
    workspace: bx-workspace
    description: The git repo will be cloned onto the volume backing this workspace
  params:
  - name: url
    description: git url to clone
    type: string
  - name: branch
    description: git revision to checkout (branch, tag, sha, refï¿½)
    type: string
    default: cd
  results:
  - name: commit
    description: The precise commit SHA that was fetched by this Task
  steps:
  - name: clone
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest
    script: |
      CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$CHECKOUT_DIR"/..?*
        fi
      }

      if [[ "$(params.deleteExisting)" == "true" ]] ; then
        cleandir
      fi

      /ko-app/git-init \
        -url "$(params.url)" \
        -branch "$(params.branch)"
      cd "$CHECKOUT_DIR"
      RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
      # Make sure we don't add a trailing newline to the result!
      echo -n "$RESULT_SHA" > $(results.commit.path)

# ---
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: pytest
# spec:
#   description: This task will run pytest on the provided input.
#   workspaces:
#     - name: source
#   params:
#     - name: args
#       description: Arguments to pass to nose
#       type: string
#       default: "-v"
#     - name: database_uri
#       description: Database connection string
#       type: string
#       default: "sqlite:///test.db"
#   steps:
#     - name: nosetests
#       image: python:3.9-slim
#       workingDir: $(workspaces.source.path)
#       env:
#         - name: DATABASE_URI
#           value: $(params.database_uri)
#       script: |
#         #!/bin/bash
#         set -e

#         echo "***** Installing dependencies *****"
#         python -m pip install --upgrade pip wheel
#         pip install -qr requirements.txt

#         echo "***** Running nosetests with: $(params.args)"
#         nosetests $(params.args)